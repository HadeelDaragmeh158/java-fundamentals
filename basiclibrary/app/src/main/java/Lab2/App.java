/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Lab2;
import java.util.*;

import org.jetbrains.annotations.NotNull;

import javax.sound.midi.Soundbank;
import java.sql.SQLOutput;

public class App {

    ///////////////////////////////////////////////////////////////////////////////
    //////////////////////  Method  Main  /////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////

    public static void main(String[] args) {
        System.out.println("Roll Method \n ");
        roll(4);
        int [] arr ={1,2,3,3,9};
        System.out.println("Array has duplicate: "+containsDuplicates(arr));
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
       AvgArr(weeklyMonthTemperatures);
    }

    ///////////////////////////////////////////////////////////////////////////////
    //////////////////////  Method  roll  /////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////

    public static void roll(int n) {
        int[] nArr = new int[n];
        int number;

        for (int i = 0; i < nArr.length; i++) {
            number = 1 + (int) (Math.random() * ((6 - 1) + 1));
            nArr[i] = number;
        }
        System.out.println(Arrays.toString(nArr));

    }

    ///////////////////////////////////////////////////////////////////////////////
    ////////////////////// Method containsDuplicates //////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////

    public static boolean containsDuplicates(int[] arr) {
        boolean bool=false;
        if(arr.length!=0){
            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr.length; j++) {
                    if(i!=j){
                        if(arr[i]==arr[j])
                            bool=true;
                    }
                }
            }

        }return bool;
    }
    ///////////////////////////////////////////////////////////////////////////////
    //////////////////////  Method  roll  /////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////

    public static float averages(int[]avgArr){
        int sumNum=0;
        float average;
        for (int i = 0; i < avgArr.length; i++) {
            sumNum+=avgArr[i];
        }
        average = sumNum/ avgArr.length;
        return average;
    }
    public static void AvgArr(int[][]avgArr){
        Float average;
        ArrayList<Float> avgs = new ArrayList<Float>();
        for (int i = 0; i < avgArr.length; i++) {
            average = averages(avgArr[i]);
            avgs.add(average);
        }
        System.out.println(Collections.min(avgs));

    }

}